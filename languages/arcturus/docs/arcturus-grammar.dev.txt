// lexical
// -------

comments                            : '#' anything
                                    | '//' anything
                                    ;

universal-character-name            : '\u' hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit
                                    | '\U' hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit
                                    ;

escaped-character-name              : simple-escaped-character-name
                                    | octal-escaped-character-name
                                    | hexadecimal-escaped-character-name
                                    ;

simple-escaped-character-name       : '\'' '\"' '\\' '\a' '\b' '\f' '\n' '\r' '\t' '\v'
                                    ;

octal-escaped-character-name        : '\' octal-digit
                                    | '\' octal-digit octal-digit
                                    | '\' octal-digit octal-digit octal-digit
                                    ;

hexadecimal-escaped-character-name  : '\x' hexadecimal-digit
                                    | '\x' hexadecimal-digit hexadecimal-digit
                                    | '\x' hexadecimal-digit hexadecimal-digit hexadecimal-digit
                                    | '\x' hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit
                                    ;

identifier                          : identifier-start-character identifier-part-characters-opt
                                    ;

identifier-start-character          : letter-character
                                    | underscore-character
                                    ;

letter-character                    : A Unicode character of classes Lu, Ll, Lt, Lm, Lo, or Nl
                                    | A universal-character-name representing a character of classes Lu, Ll, Lt, Lm, Lo, or Nl
                                    ;

underscore-characters-opt           : underscore-characters
                                    | e(psilon)
                                    ;

underscore-characters               : underscore-character
                                    | underscore-characters underscore-character
                                    ;

underscore-character                : _ (the underscore character U+005F)
                                    | A unicode-escape-sequence representing the character U+005F
                                    ;

identifier-part-characters          : identifier-part-character
                                    | identifier-part-characters identifier-part-character
                                    ;

identifier-part-character           : letter-character
                                    | decimal-digit-character
                                    | connecting-character
                                    | combining-character
                                    | formatting-character
                                    ;

letter-character                    : A Unicode character of classes Lu, Ll, Lt, Lm, Lo, or Nl
                                    | A unicode-escape-sequence representing a character of classes Lu, Ll, Lt, Lm, Lo, or Nl
                                    ;

combining-character                 : A Unicode character of classes Mn or Mc
                                    | A unicode-escape-sequence representing a character of classes Mn or Mc
                                    ;

decimal-digit-character             : A Unicode character of the class Nd
                                    | A unicode-escape-sequence representing a character of the class Nd
                                    ;

connecting-character                : A Unicode character of the class Pc
                                    | A unicode-escape-sequence representing a character of the class Pc
                                    ;

formatting-character                : A Unicode character of the class Cf
                                    | A unicode-escape-sequence representing a character of the class Cf
                                    ;

fully-qualified-name                : fully-qualified-name '.' identifier
                                    | identifier
                                    ;

literal                             : integer-number-literal
                                    | real-number-literal
                                    | string-literal
                                    | boolean-literal
                                    ;

integer-number-literal              : binary-number-literal
                                    | octal-number-literal
                                    | decimal-number-literal
                                    | hexadecimal-number-literal
                                    ;

binary-number-literal               : '0b' binary-digit
                                    | '0B' binary-digit
                                    | binary-literal underscore-characters-opt binary-digit
                                    ;

binary-digit                        : '0' '1'
                                    ;

octal-number-literal                : '0'
                                    | octal-number-literal underscore-characters-opt octal-digit
                                    ;

octal-digit                         : '0' '1' '2' '3' '4' '5' '6' '7'
                                    ;

decimal-number-literal              : nonzero-decimal-digit
                                    | decimal-number-literal underscore-characters-opt decimal-digit
                                    ;

nonzero-decimal-digit               : '1' '2' '3' '4' '5' '6' '7' '8' '9'
                                    ;

decimal-digits-opt                  : decimal-digits
                                    | e(psilon)
                                    ;

decimal-digits                      : decimal-digit
                                    | decimal-digits underscore-characters-opt decimal-digit
                                    ;

decimal-digit                       : '0' '1' '2' '3' '4' '5' '6' '7' '8' '9'
                                    ;

hexadecimal-number-literal          : '0x' hexadecimal-digits
                                    | '0X' hexadecimal-digits
                                    ;

hexadecimal-digits-opt              : hexadecimal-digits
                                    | e(psilon)
                                    ;

hexadecimal-digits                  : hexadecimal-digit
                                    | hexadecimal-digits underscore-characters-opt hexadecimal-digit
                                    ;

hexa-decimal-digit                  : '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'a' 'b' 'c' 'd' 'e' 'f' 'A' 'B' 'C' 'D' 'E' 'F'
                                    ;

real-number-literal                 : decimal-real-number-literal
                                    | hexadecimal-real-number-literal
                                    ;

decimal-real-number-literal         : decimal-digits-opt '.' decimal-digits exponent-part-opt
                                    | decimal-digits '.' exponent-part-opt
                                    | decimal-digits exponent-part
                                    ;

exponent-part-opt                   : exponent-part
                                    | e(psilon)
                                    ;

exponent-part                       : 'e' sign-opt decimal-digits
                                    | 'E' sign-opt decimal-digits
                                    ;

hexadecimal-real-number-literal     : '0x' hexadecimal-decimal-digits-opt '.' hexadecimal-decimal-digits binary-exponent-part-opt
                                    | '0X' hexadecimal-decimal-digits-opt '.' hexadecimal-decimal-digits binary-exponent-part-opt
                                    | '0x' hexadecimal-decimal-digits '.' binary-exponent-part-opt
                                    | '0X' hexadecimal-decimal-digits '.' binary-exponent-part-opt
                                    | '0x' hexadecimal-decimal-digits binary-exponent-part
                                    | '0X' hexadecimal-decimal-digits binary-exponent-part
                                    ;

binary-exponent-part-opt            : binary-exponent-part
                                    | e(psilon)
                                    ;

binary-exponent-part                : 'p' sign-opt decimal-digits
                                    | 'P' sign-opt decimal-digits
                                    ;

sign-opt                            : '+'
                                    | '-'
                                    | e(psilon)
                                    ;

string-literal                      : ''' string-characters-opt '''
                                    | '"' string-characters-opt '"'
                                    | r''' string-characters-opt '''
                                    | r'"' string-characters-opt '"'

string-characters-opt               : string-characters
                                    | e(psilon)
                                    ;

string-characters                   : string-character
                                    | string-characters string-character
                                    ;

string-character                    : identifier-part-character
                                    | escaped-character-name
                                    | universal-character-name
                                    ;

boolean-literal                     : 'true'
                                    | 'false'
                                    ;

keyword                             : 'let' 'integer' 'real' 'boolean' 'true' 'false' 'type' 'function'
                                    ;

punctuator                          : ':' '..' '...' ',' '{' '}' '[' ']' '(' ')'
                                    ;

operator                            : '+' '-' '*' '/' '>>' '<<' '=' '==' '!=' '<' '<=' '>' '>=' '&' '&&' '|' '||' '^'
                                    ;





// syntax
// ------













translation-unit    : declarations-opt
                    ;



declarations-opt    : declarations
                    | e(psilon)
                    ;

declarations        : declarations declaration
                    | declaration
                    ;





fully-qualified-name        : fully-qualified-name '.' identifier
                            | identifier
                            ;



primary-expression          : literal
                            | fully-qualified-name
                            | '('! expression ')'!
                            ;

expression                  : conditional-expression
                            | assignement-expression
                            ;

assignment-expression       : unary-expression '=' expression
                            ;

conditional-expression      : conditional-or-expression
                            | conditional-or-expression '?' expression ':' conditional-or-expression
                            ;

conditional-or-expression   : conditional-and-expression
                            | conditional-or-expression '||' conditional-and-expression
                            ;

conditional-and-expression  : inclusive-or-expression
                            | conditional-and-expression '&&' inclusive-or-expression
                            ;

inclusive-or-expression     : exclusive-or-expression
                            | inclusive-or-expression '|' exclusive-or-expression
                            ;

exclusive-or-expression     : and-expression
                            | exclusive-or-expression '^' and-expression
                            ;

and-expression              : equality-expression
                            | and-expression '&' equality-expression
                            ;

equality-expression         : relational-expression
                            | equality-expression '==' relational-expression
                            | equality-expression '!=' relational-expression
                            ;

relational-expression       : shift-expression
                            | relational-expression '<' shift-expression
                            | relational-expression '>' shift-expression
                            | relational-expression '<=' shift-expression
                            | relational-expression '>=' shift-expression
                            ;

shift-expression            : additive-expression
                            | shift-expression '<<' additive-expression
                            | shift-expression '>>' additive-expression
                            ;

additive-expression         : multiplicative-expression
                            | additive-expression '+' multiplicative-expression
                            | additive-expression '-' multiplicative-expression
                            ;

multiplicative-expression   : unary-expression
                            | multiplicative-expression '*' unary-expression
                            | multiplicative-expression '/' unary-expression
                            ;

unary-expression            : primary-expression
                            | '+' unary-expression
                            | '-' unary-expression
                            | '!' unary-expression
                            | '~' unary-expression
                            ;











unary-expresssion:

multiplicative-expression:


additive-expression:


shift-expression:



relational-expression:





comments:


structure/record:
    inheritance?


tuple:
   destructure

enum:

invocation-experession:
lambda-expression:
callable:
    function
        foo a b c
    lambda
        lambda a b c




for
foreach
while
do while


if 
else if
else if
else

case
    when 1
    when 's'
    when a is string || a is real && a is customtype



continue
break
return
yield


no null, everything always initialized
no NULL or NIL, all types have a default ctor so anytime exists a default instance 



parameters passing types


templates/generics
template <uint16 SHORT_TEXT_SIZE = 64> struct status


scalars:
    let a = 0
    let b = 10
    let c = 0x10
    let d = 4.5
    let f = 'abc'
    g = true/false
    integer
    real
    boolean

arrays:
   a[2]             - checked array
   a(2)             - raw unchecked array
   b[-2:3]          - checked ranged-based array
   b[-2:3, 0:10]    - checked ranged-based array, multidimensional
   b[-2..3, 0..10]
   c[-2:3] c[-2..3] - checked ranged-based array
   c(-2:3, 0:10)    - raw unchecked ranged-based array, multidimensional
   d[2,c]           - checked array, column based, aka FORTRAN
   d(2,c)           - raw unchecked array, column based, aka FORTRAN
   d[2,r]           - checked array, row based, aka C, 'r' is optional
   d(2,r)           - raw unchecked array, raw based, aka C, 'r' is optional
   f[-2..3, 0..10]  - checked ranged-based array, multidimensional, alternative syntax as in PASCAL


type byte = 0..255
type sbyte = -127..127


type user
    name = ''
    age = 50
    weight = 78.9


callable createUser name: string, age: integer, weight: real, kids: user[]
define createUser(name: string,
                  age: integer,
                  weight: real,
                  kids: user[])
    user result { name, age, weight, kids }
    user result { name = name, age = age, weight = weight, kids = kids[1:3] }

    const pi = 3.14

    let a = 0
    let a: integer
    let b = 10
    let b: integer
    let c = 0x10
    let d = 4.5
    let d: real
    let f = 'abc'
    let g = true
    let b[-2:3, 0:10]
    let d[2,r]
    let d(2,c)

    let d0 = d[0]
    let d1 = d[1]

    let b11 = b(1, 1)

    let l = len(d)

    define foo a: integer, b: integer
        define bar a: integer, b: integer
            return a + b
        return bar a, b

    let fooFunc = foo
    let r = fooFunc(10, 5)


    return result


define foo name: string, *, **
define foo (name: string,
            *,
            **)




declaration                 : scalar-declaration
                            | array-declaration
                            | type-declaration
                            ;

declaration-let-clause      : 'let' identifier dimensions-opt '='
                            | 'let' identifier dimensions-opt ':' 
                            ;

let a = 0
let a : integer

let b [-2..3, 0..10,c] : integer
let b [-2..3, 0..10,r] = [ 0, 1, 2, 3, 4, 5 ]


scalar-declaration          : 'let' identifier '=' primary-expression
                            | 'let' identifier ':' type-identifier | type-declaration | function-declaration
                            ;

array-declaration           : 'let' identifier '[' dimensions-opt array-layout-type-opt ']' '=' initialization-array-list
                            | 'let' identifier '[' dimensions-opt ']' ':' type-identifier
                            ;

dimensions-opt              : dimensions
                            | e(psilon)
                            ;

dimensions                  : dimension
                            | dimensions ',' dimension
                            ;

dimension                   : sign-opt integer ':' sign-opt integer
                            | sign-opt integer '..' sign-opt integer
                            ;


array-layout-type-opt       : 'c'
                            | 'r'
                            | e(psilon)
                            ;

type-declaration    : 'type' identifier ':' type-expression???
                      type byte : 0..255  

                      'type' identifier type-declaration-entries
                    ;


type-declaration-entries    : type-declaration-entry
                            | type-declaration-entries type-declaration-entry
                            ;

type-declaration-entry      : NEWLINE indent type-entry dedent
                            ;

type-entry                  : scalar-declaration
                            | array-declaration
                            ;

















